ACTIVITY NOTES FOR:

https://edabit.com/challenge/Md6usCHQ7Xsj2fQi3

PROMPT:

Create a function that determines whether elements in a n array can be re-arranged to form
a consecutive list of numbers where each number appears exactly once.

	Examples:
		cons([5, 1, 4, 3, 2]) -> true
		// Can be re-arranged to form [1, 2, 3, 4, 5]
		
		cons([5, 1, 4, 3, 2, 8]) -> false
		// Forms [1, 2, 3, 4, 5, 8], which isn't consecutive
		
		cons([5, 6, 7, 8, 9, 9]) -> false
		// 9 appears twice

ELEMENTS:

1) Arrays.sort()
2) public static boolean cons(int[])

MY THOUGHTS:

I'll use Arrays.sort() to first sort the array, then loop through and determine if the change between i and i + 1 is equal to 1. If it's not,
then it's either not consecutive (5 to 8 in line 15 of this notes document) or a repeat number (9 - 9 like in line 17)

PROTOTYPE:

public static boolean cons(int[] inputArray) {

	boolean isValid = false;
	
	Arrays.sort(inputArray);
	
	for (int i = 0; i < (inputArray.length - 1); i++) {
		if ((i == (i + 1)) || (((i + 1) - i) > 1) {
			break; // Since isValid is false by default, the loop will return false if either condition is true 
		} else {
			isValid = true;
		}
	}
	
	return isValid;
}

POST ACTIVITY THOUGHTS:

I once again short-handed in my head, which led to unexpected behavior. In my PROTOTYPE section, I wrote line 39 as-is when implementing it
in ConsecutiveNumbers.java, which caused errors because what I meant while I was writing it was if ((inputArray[i] == (inputArray[(i + 1)]))
and the rest as seen in line 14 of ConsecutiveNumbers.java.

The result of this document's line 39 was the passing of tests 1-3, but failing of 4-6, which is what brought it to my attention.
