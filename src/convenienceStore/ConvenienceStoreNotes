ACTIVITY NOTES FOR:

https://edabit.com/challenge/jfquehNLzpXW5ZQu5

PROMPT:

Given a total due and an array representing the amount of change in your pocket, determine whether or not you are able to pay for the item.
Change will always be represented in the following order: int quarters, int dimes, int nickels, int pennies.

To illustrate: changeEnough([25, 20, 5, 0], 4.25) should yield true, since having 25 quarters, 20 dimes, 5 nickels, and 0 pennies
gives you 6.25 + 2 + .25 + 0 = 8.50.

ELEMENTS:

1) int pocketChange[];
2) float Cost;
3) public boolean changeEnough(int pocketChange[], float inputCost){}
4) boolean hasEnoughChange;
5) int convertedCost = (inputCost * 100);

MY THOUGHTS:

My first thought is to have a private int to simplify the math, then perform the calculation and return the hasEnoughChange boolean.
I know I could use a double or a float, but since floats are smaller I'm happy with that.

PROTOTYPE:

public class ConvenienceStore {

	public boolean changeEnough(int[] pocketChange, float inputCost) {
		//Forgot to cast from float to int
		int convertedCost = (int)(inputCost * 100);
		int pocketChangeTotal = 0;
		
		 for (int i = 0; i < pocketChange.length; i++) {
		 	int coinValue;
		 	
		 	switch (i) {
		 		case 0:
	 				coinValue = 25;
		 			break;
	 			case 1:
	 				coinValue = 10;
	 				break;
 				case 2:
 					coinValue = 5;
 					break;
				case 3:
					coinValue = 1;
					break;
			}
				
			pocketChangeTotal += (pocketChange[i] * coinValue);
		 }
		 
		 if (pocketChangeTotal >= convertedCost) {
		 	return true;
		 } else {
		 	moreChangeRequired(pocketChangeTotal, convertedCost);
		 	return false;
	 	}
	 }
	 
	 private void moreChangeRequired(int inputChangeTotal, int inputCost) {
	 	double changeRemaining = ((inputCost - inputChangeTotal) * .01);
	 	sysout("Sorry, you still need $" + changeRemaining + " to purchase this item.");
	 }
}

POST ACTIVITY THOUGHTS:

I'm feeling pretty comfortable with loops, arrays, casting, and manipulating values at this point, so this was pretty simple.
The unit tests all passed clear, so I'm happy with it, but I'll add a private method that returns the amount of change (in dollars)
that you still need to have more pocketChangeTotal than inputCost.

I find this code golf-style answer pretty fun, and a brief version of my method:

	" return change[0] * 25 + change[1] * 10 + change[2] * 5 + change[3] >= amountDue * 100; "
	
It seems like quite a few people made double variables for their equivalent of my int coinValue, which seems to have helped
keep their changeEnough()s quite short.  

Sometimes I feel silly for being so verbose in my methods, but I have fun typing it out and I find my versions quite readable.
