ACTIVITY NOTES FOR:

https://edabit.com/challenge/6mLZjPrNFrfGfdwqa

PROMPT:

A magic sigil is a glyph which represents a desire one wishes to manifest in their lives.
There are many ways to create a sigil, but the most common is to write out a specific desire (e.g. "I HAVE WONDERFUL FRIENDS WHO LOVE ME"),
remove all vowels, remove any duplicate letters (keeping the last occurrence), and then design a glyph from what remains.

Using the sentence above as an example, we would remove duplicate letters:

AUFRINDSWHLOVME

And then remove all vowels, leaving us with:

FRNDSWHLVM

Create a function that takes a string and removes its vowels and duplicate letters. The returned string should not contain any spaces and be in uppercase.

	Examples:
		sigilize("i am healthy") ➞ "MLTHY"
		
		sigilize("I FOUND MY SOULMATE") ➞ "FNDYSLMT"
		
		sigilize("I have a job I enjoy and it pays well") ➞ "HVBJNDTPYSWL"
		
	Notes:
		For duplicate letters the last one is kept.
		When performing actual sigil magic, you must make your sigils manually.
		Check the Resources tab for more info on sigils if you're interested in the concept.

ELEMENTS:

1) String.toUpperCase()
2) String.substring(x, y)
3) public static String sigilize(String inputPhrase)

MY THOUGHTS:

The removal of spaces, vowels, and the capitalization of all letters I am quite confident I can handle, but the removal of duplicates while keeping the final occurrence is...
daunting. I'm not sure how I want to tackle that.

	UPDATE:
		Using the Oracle Java documentation found here: https://docs.oracle.com/javase/7/docs/api/java/lang/String.html#lastIndexOf(java.lang.String)
		I was able to easily find the last instance of a given String. I forgot to document this in the "MagicSigilGenerator first pass" commit
		
		That said, there's a... bug, I suppose... where if a consonant is in the inputPhrase twice, once as lower and once as upper case, it won't catch that there's a duplicate as shown by
		the test7() test I wrote. The expected output should be "QCKBWNFXJMPSVRTHLZYDG" but is instead "TQCKBWNFXJMPSVRTHLZYDG", which has 2 T's.

PROTOTYPE:

public static String sigilize(String inputPhrase) {
	String roughSigil = "";
	String finalSigil = "";
	
	for (int i = 0; i < inputPhrase.length(); i++) {
		switch (inputPhrase.substring(i, i + 1)) {
			case "A": case "E": case "I": case "O": case "U": case " ":
				break;
			default:
				roughSigil += inputPhrase.substring(i, i + 1).toUpperCase();
				break;
		}
	}
	
	finalSigil = roughSigil.clone();
	
	return finalSigil;
}

POST ACTIVITY THOUGHTS:


