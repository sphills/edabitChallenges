ACTIVITY NOTES FOR:

https://edabit.com/challenge/3S8XppR6Yf5mXPxij

PROMPT:

Create a function which simulates the game "rock, paper, scissors". The function takes the input of both players (rock, paper or scissors), first parameter from first player, second from second player. The function returns the result as such:

"Player 1 wins"
"Player 2 wins"
"TIE" (if both inputs are the same)
The rules of rock, paper, scissors, if not known:

Both players have to say either "rock", "paper" or "scissors" at the same time.
Rock beats scissors, paper beats rock, scissors beat paper.

	Examples:
		rps("rock", "paper") ➞ "Player 2 wins"
		
		rps("paper", "rock") ➞ "Player 1 wins"
		
		rps("paper", "scissors") ➞ "Player 2 wins"
		
		rps("scissors", "scissors") ➞ "TIE"
		
		rps("scissors", "paper") ➞ "Player 1 wins"
	Notes:
		There are several ways to solve this challenge.

ELEMENTS:

1) String.equals()
2) Equality/Relational/Conditional Operators
3) public static String rps(String player1, String player2) 

MY THOUGHTS:

There's an easy if (player1.equals(player2)) { return "TIE"; } that'll handle the ties, but I'm still deciding how to handle actual comparison
between inputs. Do I want to map the input to numbers? I don't want to *nest if {} else if {} statements...

PROTOTYPE:

public static String rps(String player1, String player2) {
	int rockValue = 0;
	int paperValue = 0;
	int scissorsValue = 0;
	int player1Value = 0;
	int player2Value = 0;
	String winResult = "";
	
	if (player1.equals(player2)) {
		winResult = "TIE";
	} else {
		switch (player1.toLowerCase()) {
			case "rock":
				paperValue = 1;
				scissorsValue = -1;
				break;
			case "paper":
				scissorsValue = 1;
				rockValue = -1;
				break;
			case "scissors":
				rockValue = 1;
				paperValue = -1;
				break;
			default:
				System.out.println("The value entered for Player 1 wasn't 'rock,' 'paper,' or 'scissors'. Please only enter 'rock,' 'paper,' or 'scissors'.");
		}
		
		switch (player2.toLowerCase()) {
			case "rock":
				player2Value = rockValue;
				break;
			case "paper":
				player2Value = paperValue;
				break;
			case "scissors":
				player2Value = scissorsValue;
				break;
			default:
				System.out.println("The value entered for Player 2 wasn't 'rock,' 'paper,' or 'scissors'. Please only enter 'rock,' 'paper,' or 'scissors'.");
			}
			
		if (player1Value > player2Value) {
			winResult = "Player 1 wins";
		} else if (player1Value < player2Value) {
			winResult = "Player 2 wins";
		}
	}
	
	return winResult;
}

POST ACTIVITY THOUGHTS:

I've done similar projects before I started this edabit repository, and I've always hated the 
	
	if (input1.equals(testCase1) && input2.equals(testCase1)) { return "TIE" } else if (input1.equals(testCase1) && input2.equals(testCase2)) { return "Player 1 wins"} else if...
	
submissions I've seen from others. I feel like my solution accomplishes the same thing while being pretty readable. Just for review:

Player 1's String input, player1, will be used to determine the values of rockValue, paperValue, and scissorsValue, which Player 2's String input player2
will use to determine player2Value's... value. player1Value will always be 0, and only ever used to compare with player2Value to determine the winner.
Meanwhile, player2Value will only ever be 1 or -1 when player1 and player2 aren't .equal(). Let's step through with the following game:

1) Player 1 plays rock, while Player 2 plays paper (which we humans know will beat rock).

2) rps() is called, which takes in String player1 "rock" and String player2 "paper".

3) int rockValue, paperValue, scissorsValue, player1Value, and player2Value are all instantiated with 0 as their placeholder value.

4) String winResult, the result we'll return once the function has decided the outcome of the game, is instantiated empty.

5) First, our if statement compares if player1 equals() player2. This is the String version, since == doesn't work the same way idiomatically the
	way we're used to with primitive types. Since player1 doesn't equal() player2, we skip the contents of this if and move to the else.

6) Now, we enter this else statement and a switch that takes a lowercase player1. When player1 is rock, like in this game, then paperValue is 
	assigned 1, and scissorsValue is assigned -1, since paper beats rock and rock beats scissors. Then, the break gets us out of the switch.
	
7) With the function variables paperValue and scissorsValue modified, it's time to move on to the next switch statement, where we evaluate player2.

8) We enter the second switch statement, and since player2 is paper, player2Value is assigned 1 (as set by the previous switch statement).
	We break the switch statement and move on.

9) Now that player1Value is assigned a value (it was instantiated in line 11 with 0) and player2Value is assigned a value, we enter the if statement player1Value > player2Value.
	Since 0 is not larger than 1, this returns false and we move on to the else if that follows.
	
10) In the else if statement, we compare player1Value < player2Value. Since 0 is smaller than 1, this statement is true and we enter into it.

11) We assign winResult the value "Player 2 wins", and with that we exit the nested if statements.

12) Finally, we return the String winResult for use by external forces, which in this game is "Player 2 wins"
